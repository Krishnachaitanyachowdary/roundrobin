 
#include<iostream> 
using namespace std; 

 
void findWaitingTime(int processes[], int n, 
			int bt[], int wt[], int quantum) 
{ 
	 
	int rem_bt[n]; 
	for (int c = 0 ; c < n ; c++) 
		rem_bt[c] = bt[c]; 

	int t = 0;  

	 
	while (1) 
	{ 
		bool done = true; 

	 
		for (int c = 0 ; c < n; c++) 
		{ 
			
			if (rem_bt[c] > 0) 
			{ 
				done = false; 

				if (rem_bt[c] > quantum) 
				{ 
					
					t += quantum; 

					
					rem_bt[c] -= quantum; 
				} 

				 
				else
				{ 
					
					t = t + rem_bt[c]; 

					 
					wt[c] = t - bt[c]; 

					
					rem_bt[c] = 0; 
				} 
			} 
		} 

		if (done == true) 
		break; 
	} 
} 

void findTurnAroundTime(int processes[], int n, 
						int bt[], int wt[], int tat[]) 
{ 
	
	for (int c = 0; c < n ; c++) 
		tat[c] = bt[c] + wt[c]; 
} 


void findavgTime(int processes[], int n, int bt[], 
									int quantum) 
{ 
	int wt[n], tat[n], total_wt = 0, total_tat = 0; 

	
	findWaitingTime(processes, n, bt, wt, quantum); 

	
	findTurnAroundTime(processes, n, bt, wt, tat); 

	
	cout << "Processes "<< " Burst time "
		<< " Waiting time " << " Turn around time\n"; 

	
	for (int c=0; c<n; c++) 
	{ 
		total_wt = total_wt + wt[c]; 
		total_tat = total_tat + tat[c]; 
		cout << " " << c+1 << "\t\t" << bt[c] <<"\t "
			<< wt[c] <<"\t\t " << tat[c] <<endl; 
	} 

	cout << "Average waiting time = "
		<< (float)total_wt / (float)n; 
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n; 
} 

int main() 
{ 

	int processes[] = { 1, 2, 3}; 
	int n = sizeof processes / sizeof processes[0]; 


	int burst_time[] = {10, 5, 8}; 


	int quantum = 2; 
	findavgTime(processes, n, burst_time, quantum); 
	return 0; 
} 
